#!/usr/bin/env python3
"""
checkdmarc_enhanced.py
Analyse ULTRA-D√âTAILL√âE d'un rapport JSON produit par checkdmarc
( SPF / DKIM / DMARC / MTA-STS / TLS-RPT / DNSSEC / BIMI )

üéØ Cette version EXPLIQUE en d√©tail :
- POURQUOI chaque √©l√©ment est important
- QUE SE PASSE-T-IL si c'est mal configur√©
- QUELS SONT LES RISQUES CONCRETS
- COMMENT CORRIGER les probl√®mes

Usage :
    python3 checkdmarc_enhanced.py scan.json [scan2.json ...]

Sortie :
    - Diagnostic exhaustif avec explications d√©taill√©es
    - Code retour 0 si aucun CRITICAL, 1 sinon (utile en CI/CD)

Auteur : ChatGPT & Assistant IA (2025)
"""
import json
import sys
from pathlib import Path
from typing import List, Dict, Tuple

# ----------------- R√©f√©rences officielles am√©lior√©es -----------------

REF: Dict[str, str] = {
    "SPF_LIMIT": "RFC 7208 ¬ß4.6.4 ‚Äì Limite de 10 consultations DNS | https://tools.ietf.org/html/rfc7208#section-4.6.4",
    "SPF_ALL": "NIST SP 800-177r1 ¬ß2.3 ‚Äì Usage de ¬´ -all ¬ª | https://csrc.nist.gov/publications/detail/sp/800-177/rev-1/final",
    "DKIM_LEN": "RFC 8301 ‚Äì Longueur mini 1024 bits, recommand√© 2048 | https://tools.ietf.org/html/rfc8301",
    "DMARC_POLICY": "RFC 7489 ¬ß6.3 ‚Äì p=none/quarantine/reject | https://tools.ietf.org/html/rfc7489#section-6.3",
    "MTA_STS": "RFC 8461 ‚Äì MTA-STS enforce vs testing | https://tools.ietf.org/html/rfc8461",
    "TLS_RPT": "RFC 8460 ‚Äì SMTP TLS Reporting | https://tools.ietf.org/html/rfc8460",
    "DNSSEC": "RFC 4033-35 ‚Äì Authentification DNS | https://tools.ietf.org/html/rfc4033",
    "BIMI": "BIMI WG draft ‚Äì DMARC p=quarantine/reject requis | https://datatracker.ietf.org/doc/draft-brand-indicators-for-message-identification/"
}

# ----------------- Helpers am√©lior√©s -----------------

Status = Tuple[str, str, str]  # (LEVEL, MESSAGE, REFKEY)

def status(level: str, msg: str, ref: str) -> Status:
    return (level, msg, ref)

def print_status(s: Status) -> None:
    lvl, msg, ref = s
    icons = {"OK": "‚úÖ", "WARNING": "‚ö†Ô∏è", "CRITICAL": "üö®", "INFO": "‚ÑπÔ∏è"}
    colors = {"OK": "\033[92m", "WARNING": "\033[93m", "CRITICAL": "\033[91m", "INFO": "\033[94m"}
    
    icon = icons.get(lvl, "‚ùì")
    color = colors.get(lvl, "\033[0m")
    reset = "\033[0m"
    
    print(f"{icon} [{color}{lvl}{reset}] {msg}")
    print(f"   üìö R√©f√©rence: {REF.get(ref, ref)}")
    print()

# ----------------- Analyse SPF ULTRA-D√âTAILL√âE -----------------

def analyze_spf(spf: dict) -> List[Status]:
    out: List[Status] = []
    
    if not spf or not spf.get("record"):
        out.append(status("CRITICAL",
                          "SPF TOTALEMENT ABSENT !\n"
                          "üî• DANGER IMM√âDIAT: N'importe qui peut envoyer des emails en usurpant votre domaine.\n"
                          "üí• CONS√âQUENCES:\n"
                          "   ‚Ä¢ Phishing ciblant vos clients avec votre identit√©\n"
                          "   ‚Ä¢ Spam massif d√©truisant votre r√©putation\n"
                          "   ‚Ä¢ Perte de confiance des partenaires\n"
                          "   ‚Ä¢ Sanctions l√©gales possibles\n"
                          "üõ†Ô∏è SOLUTION URGENTE: Ajouter un enregistrement DNS TXT SPF.\n"
                          "   Exemple: 'v=spf1 ip4:votre.ip.serveur.mail -all'",
                          "SPF_ALL"))
        return out

    record = spf["record"]
    out.append(status("INFO", f"üìù Enregistrement SPF d√©tect√©: {record}", "SPF_LIMIT"))
    
    # Validit√©
    if not spf.get("valid", False):
        error_detail = spf.get('error', 'erreur inconnue')
        out.append(status("CRITICAL",
                          f"SPF SYNTAXIQUEMENT INVALIDE !\n"
                          f"üî¥ ERREUR: {error_detail}\n"
                          f"üíÄ IMPACT CRITIQUE: Les serveurs de messagerie IGNORENT votre SPF d√©faillant.\n"
                          f"üéØ R√âSULTAT: Aucune protection, comme si SPF n'existait pas.\n"
                          f"‚ö° RISQUES:\n"
                          f"   ‚Ä¢ Usurpation d'emails garantie\n"
                          f"   ‚Ä¢ Faux sentiment de s√©curit√©\n"
                          f"   ‚Ä¢ D√©livrabilit√© impr√©visible\n"
                          f"üîß CORRECTION: Utiliser un validateur SPF en ligne pour corriger la syntaxe.",
                          "SPF_LIMIT"))
    else:
        out.append(status("OK", 
                          "SYNTAXE SPF CORRECTE !\n"
                          "‚úÖ BONNE NOUVELLE: Les serveurs peuvent interpr√©ter vos r√®gles.\n"
                          "üéØ AVANTAGE: Base technique solide pour l'authentification.\n"
                          "üõ°Ô∏è PROTECTION: Vos r√®gles d'autorisation sont compr√©hensibles par tous les serveurs.",
                          "SPF_LIMIT"))

    # Analyse des consultations DNS
    dns_lookups = spf.get("dns_lookups", 0)
    dns_void_lookups = spf.get("dns_void_lookups", 0)
    total_lookups = dns_lookups + dns_void_lookups
    
    if total_lookups > 10:
        out.append(status("CRITICAL",
                          f"SPF TROP COMPLEXE - √âCHEC GARANTI !\n"
                          f"üî• PROBL√àME: {total_lookups} consultations DNS (limite RFC: 10 maximum)\n"
                          f"   ‚Ä¢ Consultations normales: {dns_lookups}\n"
                          f"   ‚Ä¢ Consultations void: {dns_void_lookups}\n"
                          f"üí• CONS√âQUENCE D√âSASTREUSE: Les serveurs retournent 'PermError' et IGNORENT TOTALEMENT votre SPF !\n"
                          f"‚ö†Ô∏è CAUSES FR√âQUENTES:\n"
                          f"   ‚Ä¢ Trop d'instructions 'include:'\n"
                          f"   ‚Ä¢ Cha√Ænes de redirections complexes\n"
                          f"   ‚Ä¢ Inclusions r√©cursives\n"
                          f"üõ†Ô∏è SOLUTIONS IMM√âDIATES:\n"
                          f"   1. Remplacer 'include:' par des IP directes (ip4:/ip6:)\n"
                          f"   2. √âliminer les inclusions inutiles\n"
                          f"   3. Utiliser des sous-domaines pour diviser les r√®gles\n"
                          f"üìä IMPACT BUSINESS: Protection nulle + d√©livrabilit√© d√©grad√©e !",
                          "SPF_LIMIT"))
    elif total_lookups > 7:
        out.append(status("WARNING",
                          f"SPF PROCHE DE LA LIMITE CRITIQUE !\n"
                          f"‚ö†Ô∏è √âTAT: {total_lookups}/10 consultations DNS utilis√©es\n"
                          f"   ‚Ä¢ Consultations normales: {dns_lookups}\n"
                          f"   ‚Ä¢ Consultations void: {dns_void_lookups}\n"
                          f"üéØ RISQUE: D√©passement de limite lors de futurs ajouts\n"
                          f"üìà TENDANCE: Croissance naturelle avec l'√©volution infrastructure\n"
                          f"üîÆ PR√âVISION: Panne SPF probable dans les 6-12 mois\n"
                          f"üí° RECOMMANDATION PR√âVENTIVE:\n"
                          f"   ‚Ä¢ Optimiser d√®s maintenant (plus facile que corriger en urgence)\n"
                          f"   ‚Ä¢ Documenter les inclusions n√©cessaires\n"
                          f"   ‚Ä¢ Planifier une refonte si > 8 lookups",
                          "SPF_LIMIT"))
    elif total_lookups > 5:
        out.append(status("INFO",
                          f"SPF de complexit√© mod√©r√©e ({total_lookups}/10 consultations DNS)\n"
                          f"   ‚Ä¢ Consultations normales: {dns_lookups}\n"
                          f"   ‚Ä¢ Consultations void: {dns_void_lookups}\n"
                          f"‚úÖ √âTAT: Fonctionnel et dans les normes\n"
                          f"üéØ CONSEIL: Surveiller l'√©volution lors d'ajouts futurs\n"
                          f"üìã MAINTENANCE: R√©viser annuellement pour optimisation",
                          "SPF_LIMIT"))
    elif total_lookups > 0:
        out.append(status("OK",
                          f"SPF OPTIMIS√â ! ({total_lookups}/10 consultations DNS)\n"
                          f"   ‚Ä¢ Consultations normales: {dns_lookups}\n"
                          f"   ‚Ä¢ Consultations void: {dns_void_lookups}\n"
                          f"‚úÖ PERFORMANCE: Excellente\n"
                          f"üéØ MARGE: Large marge pour √©volutions futures\n"
                          f"üèÜ STATUT: Configuration optimale",
                          "SPF_LIMIT"))

    # Analyse directive ALL (la plus importante !)
    if record and record.strip().endswith("-all"):
        out.append(status("OK", 
                          "PROTECTION SPF MAXIMALE ACTIV√âE ! üõ°Ô∏è\n"
                          "üéØ DIRECTIVE '-all' (FAIL) = Politique la plus stricte\n"
                          "‚úÖ FONCTIONNEMENT:\n"
                          "   ‚Ä¢ Emails autoris√©s: ACCEPT√âS normalement\n"
                          "   ‚Ä¢ Emails non-autoris√©s: REJET√âS purement et simplement\n"
                          "üèÜ AVANTAGES BUSINESS:\n"
                          "   ‚Ä¢ Protection contre usurpation: 95%+\n"
                          "   ‚Ä¢ Confiance client renforc√©e\n"
                          "   ‚Ä¢ R√©putation domaine pr√©serv√©e\n"
                          "   ‚Ä¢ Conformit√© s√©curit√© maximale\n"
                          "üìä R√âSULTAT: Votre domaine est VRAIMENT prot√©g√© !",
                          "SPF_ALL"))
    elif record and "~all" in record:
        out.append(status("WARNING",
                          "PROTECTION SPF PARTIELLE - RISQUE MOD√âR√â ‚ö†Ô∏è\n"
                          "üéØ DIRECTIVE '~all' (SOFTFAIL) = Politique permissive\n"
                          "‚ö° FONCTIONNEMENT RISQU√â:\n"
                          "   ‚Ä¢ Emails autoris√©s: ACCEPT√âS normalement\n"
                          "   ‚Ä¢ Emails non-autoris√©s: ACCEPT√âS mais marqu√©s 'suspect'\n"
                          "üö® PROBL√àMES FR√âQUENTS:\n"
                          "   ‚Ä¢ Nombreux serveurs IGNORENT le marquage\n"
                          "   ‚Ä¢ Usurpation toujours possible\n"
                          "   ‚Ä¢ Faux sentiment de s√©curit√©\n"
                          "üìà RECOMMANDATION STRAT√âGIQUE:\n"
                          "   1. Tester en mode '-all' sur domaine test\n"
                          "   2. Surveiller rapports DMARC 2-4 semaines\n"
                          "   3. Passer √† '-all' pour protection r√©elle\n"
                          "üéØ OBJECTIF: Protection √† 95% au lieu de 60%",
                          "SPF_ALL"))
    elif record and "+all" in record:
        out.append(status("CRITICAL",
                          "DIRECTIVE SPF SUICIDAIRE D√âTECT√âE ! üíÄ\n"
                          "üö® DIRECTIVE '+all' (PASS) = D√âSASTRE S√âCURITAIRE\n"
                          "üí• FONCTIONNEMENT CATASTROPHIQUE:\n"
                          "   ‚Ä¢ TOUS les serveurs mondiaux autoris√©s √† envoyer en votre nom\n"
                          "   ‚Ä¢ Spammeurs, pirates, concurrents: acc√®s libre\n"
                          "   ‚Ä¢ SPF transform√© en panneau 'bienvenue aux fraudeurs'\n"
                          "üî• CONS√âQUENCES IMM√âDIATES:\n"
                          "   ‚Ä¢ Usurpation massive garantie\n"
                          "   ‚Ä¢ R√©putation d√©truite en heures\n"
                          "   ‚Ä¢ Blacklisting probable\n"
                          "   ‚Ä¢ Perte de confiance client\n"
                          "üÜò ACTION URGENTE REQUISE:\n"
                          "   REMPLACER '+all' par '-all' IMM√âDIATEMENT !\n"
                          "‚è∞ D√âLAI MAXIMAL: 1 heure (avant exploitation malveillante)",
                          "SPF_ALL"))
    elif record and "?all" in record:
        out.append(status("WARNING",
                          "SPF EN MODE 'NEUTRE' - INEFFICACE ! ü§∑\n"
                          "üéØ DIRECTIVE '?all' (NEUTRAL) = Aucune opinion\n"
                          "‚ö™ FONCTIONNEMENT INUTILE:\n"
                          "   ‚Ä¢ SPF dit 'je ne sais pas' pour les non-autoris√©s\n"
                          "   ‚Ä¢ Serveurs appliquent leur politique locale (impr√©visible)\n"
                          "   ‚Ä¢ Comportement variable selon les destinataires\n"
                          "üìä PROTECTION R√âELLE: ~20% (al√©atoire)\n"
                          "üé≠ PROBL√àME: Fausse impression de s√©curit√©\n"
                          "üîß SOLUTION: Choisir '-all' ou '~all' selon tol√©rance au risque",
                          "SPF_ALL"))
    else:
        if record:  # SPF existe mais pas de directive 'all'
            out.append(status("CRITICAL",
                              "SPF INCOMPLET - AUCUNE DIRECTIVE 'ALL' ! üï≥Ô∏è\n"
                              "üö® PROBL√àME MAJEUR: Enregistrement SPF tronqu√©\n"
                              "‚ö° COMPORTEMENT IMPR√âVISIBLE:\n"
                              "   ‚Ä¢ Chaque serveur applique SA politique par d√©faut\n"
                              "   ‚Ä¢ Gmail: peut accepter ou rejeter\n"
                              "   ‚Ä¢ Outlook: comportement diff√©rent\n"
                              "   ‚Ä¢ Serveurs priv√©s: totalement al√©atoire\n"
                              "üé≤ R√âSULTAT: Protection au hasard (0-70%)\n"
                              "üéØ DIAGNOSTIC: Erreur de configuration ou record tronqu√©\n"
                              "üõ†Ô∏è CORRECTION SIMPLE: Ajouter '-all' en fin d'enregistrement\n"
                              "üìù EXEMPLE: 'v=spf1 ip4:1.2.3.4 include:_spf.google.com -all'",
                              "SPF_ALL"))
    
    return out

# ----------------- Analyse DKIM ULTRA-D√âTAILL√âE -----------------

def analyze_dkim(dkim: dict) -> List[Status]:
    out: List[Status] = []
    
    if not dkim:
        out.append(status("WARNING",
                          "DKIM NON D√âTECT√â DANS LE SCAN ! üîç\n"
                          "‚ö†Ô∏è LIMITATION TECHNIQUE: checkdmarc teste un seul s√©lecteur par d√©faut\n"
                          "üéØ S√âLECTEURS STANDARDS TEST√âS: 'default', 'selector1', 'dkim'\n"
                          "üí° SITUATION POSSIBLE:\n"
                          "   ‚Ä¢ DKIM existe mais avec s√©lecteur personnalis√©\n"
                          "   ‚Ä¢ Configuration sur sous-domaines uniquement\n"
                          "   ‚Ä¢ Cl√©s DKIM en cours de d√©ploiement\n"
                          "üîç V√âRIFICATION MANUELLE RECOMMAND√âE:\n"
                          "   1. Examiner les en-t√™tes d'emails sortants\n"
                          "   2. Chercher 'DKIM-Signature:' dans les sources\n"
                          "   3. Tester s√©lecteurs personnalis√©s\n"
                          "üìä IMPACT: Authentification incompl√®te si r√©ellement absent",
                          "DKIM_LEN"))
        return out

    # Analyse de chaque s√©lecteur DKIM
    for selector, det in dkim.items():
        out.append(status("INFO", f"üîë Analyse du s√©lecteur DKIM: '{selector}'", "DKIM_LEN"))
        
        record = det.get("record")
        if not record:
            out.append(status("CRITICAL",
                              f"S√âLECTEUR DKIM '{selector}' TOTALEMENT ABSENT ! üö®\n"
                              f"üí• CONS√âQUENCE DIRECTE: Signature DKIM impossible √† v√©rifier\n"
                              f"‚ö° IMPACT AUTHENTIFICATION:\n"
                              f"   ‚Ä¢ Emails marqu√©s 'DKIM=fail' ou 'DKIM=none'\n"
                              f"   ‚Ä¢ DMARC ne peut pas s'appuyer sur DKIM\n"
                              f"   ‚Ä¢ Protection contre modification en transit = Z√âRO\n"
                              f"üéØ CAUSES FR√âQUENTES:\n"
                              f"   ‚Ä¢ Cl√© supprim√©e accidentellement du DNS\n"
                              f"   ‚Ä¢ Erreur de nom de s√©lecteur\n"
                              f"   ‚Ä¢ Propagation DNS incompl√®te\n"
                              f"üõ†Ô∏è R√âSOLUTION:\n"
                              f"   1. V√©rifier configuration serveur mail\n"
                              f"   2. R√©g√©n√©rer paire de cl√©s DKIM\n"
                              f"   3. Publier cl√© publique dans DNS TXT\n"
                              f"üìç Zone DNS: {selector}._domainkey.votredomaine.com",
                              "DKIM_LEN"))
            continue

        if not det.get("valid", False):
            error_detail = det.get('error', 'erreur inconnue')
            out.append(status("CRITICAL",
                              f"DKIM '{selector}' INVALIDE ! üî¥\n"
                              f"üíÄ ERREUR TECHNIQUE: {error_detail}\n"
                              f"‚ö° CONS√âQUENCE: Signature DKIM syst√©matiquement rejet√©e\n"
                              f"üéØ IMPACT D√âLIVRABILIT√â:\n"
                              f"   ‚Ä¢ Emails suspects pour les serveurs destinataires\n"
                              f"   ‚Ä¢ Score de r√©putation d√©grad√©\n"
                              f"   ‚Ä¢ Risque accru de placement en spam\n"
                              f"üîß CAUSES TYPIQUES:\n"
                              f"   ‚Ä¢ Format de cl√© publique incorrect\n"
                              f"   ‚Ä¢ Caract√®res invalides dans l'enregistrement\n"
                              f"   ‚Ä¢ Corruption lors de la publication DNS\n"
                              f"üõ†Ô∏è DIAGNOSTIC: Valider l'enregistrement DNS avec outils DKIM",
                              "DKIM_LEN"))
            continue

        # Analyse de la robustesse de la cl√©
        key_size = det.get("key_length", 0)
        if key_size < 1024:
            out.append(status("CRITICAL",
                              f"CL√â DKIM '{selector}' DANGEREUSEMENT COURTE ! ‚ö†Ô∏è\n"
                              f"üîë TAILLE ACTUELLE: {key_size} bits (minimum l√©gal: 1024 bits)\n"
                              f"üíÄ VULN√âRABILIT√â CRYPTOGRAPHIQUE MAJEURE:\n"
                              f"   ‚Ä¢ Factorisation possible en quelques heures/jours\n"
                              f"   ‚Ä¢ Attaquants peuvent forger vos signatures DKIM\n"
                              f"   ‚Ä¢ Usurpation d'emails avec authentification 'valide'\n"
                              f"üö® EXPLOITATION POSSIBLE:\n"
                              f"   ‚Ä¢ Phishing ind√©tectable par les filtres\n"
                              f"   ‚Ä¢ Compromission totale de l'authentification\n"
                              f"‚è∞ ACTION IMM√âDIATE REQUISE:\n"
                              f"   1. G√©n√©rer nouvelle paire 2048+ bits\n"
                              f"   2. D√©ployer nouvelle cl√© publique\n"
                              f"   3. Mettre √† jour configuration serveur\n"
                              f"   4. Tester puis supprimer ancienne cl√©\n"
                              f"üìä PRIORIT√â: CRITIQUE (risque s√©curit√© majeur)",
                              "DKIM_LEN"))
        elif key_size < 2048:
            out.append(status("WARNING",
                              f"CL√â DKIM '{selector}' SOUS-OPTIMALE üìè\n"
                              f"üîë TAILLE ACTUELLE: {key_size} bits (minimum recommand√©: 2048 bits)\n"
                              f"‚ö†Ô∏è S√âCURIT√â R√âDUITE:\n"
                              f"   ‚Ä¢ Protection correcte aujourd'hui\n"
                              f"   ‚Ä¢ Vuln√©rabilit√© croissante avec le temps\n"
                              f"   ‚Ä¢ Puissance de calcul augmente constamment\n"
                              f"üéØ RECOMMANDATION STRAT√âGIQUE:\n"
                              f"   ‚Ä¢ Planifier migration vers 2048 bits\n"
                              f"   ‚Ä¢ Nouveau standard industrie\n"
                              f"   ‚Ä¢ Compatibilit√© universelle assur√©e\n"
                              f"üìÖ D√âLAI SUGG√âR√â: 6-12 mois (non urgent mais recommand√©)\n"
                              f"üîê AVANTAGE 2048 bits: Protection 10+ ans garantie",
                              "DKIM_LEN"))
        else:
            out.append(status("OK",
                              f"CL√â DKIM '{selector}' EXCELLENTE ! üèÜ\n"
                              f"üîë TAILLE: {key_size} bits (standard moderne)\n"
                              f"‚úÖ S√âCURIT√â CRYPTOGRAPHIQUE OPTIMALE:\n"
                              f"   ‚Ä¢ Protection contre factorisation: 10+ ans\n"
                              f"   ‚Ä¢ R√©sistance aux attaques par force brute\n"
                              f"   ‚Ä¢ Conformit√© aux standards actuels\n"
                              f"üéØ AVANTAGES BUSINESS:\n"
                              f"   ‚Ä¢ Authentification robuste des emails\n"
                              f"   ‚Ä¢ Int√©grit√© garantie en transit\n"
                              f"   ‚Ä¢ Confiance maximale des destinataires\n"
                              f"   ‚Ä¢ D√©livrabilit√© optimis√©e\n"
                              f"üèÖ R√âSULTAT: Configuration DKIM exemplaire !",
                              "DKIM_LEN"))
    
    return out

# ----------------- Analyse DMARC ULTRA-D√âTAILL√âE -----------------

def analyze_dmarc(dmarc: dict) -> List[Status]:
    out: List[Status] = []
    
    if not dmarc or not dmarc.get("record"):
        out.append(status("CRITICAL",
                          "DMARC TOTALEMENT ABSENT ! üö®\n"
                          "üí• SITUATION CRITIQUE: Aucune politique anti-usurpation\n"
                          "üéØ CONS√âQUENCES D√âSASTREUSES:\n"
                          "   ‚Ä¢ SPF et DKIM existent mais ne servent √† RIEN\n"
                          "   ‚Ä¢ Aucune instruction sur que faire des √©checs\n"
                          "   ‚Ä¢ Serveurs appliquent politiques al√©atoires\n"
                          "   ‚Ä¢ Usurpation libre m√™me avec SPF/DKIM en place\n"
                          "üíÄ IMPACT BUSINESS MAJEUR:\n"
                          "   ‚Ä¢ Phishing utilisant votre domaine\n"
                          "   ‚Ä¢ R√©putation d√©truite par spam tiers\n"
                          "   ‚Ä¢ Perte de confiance client/partenaire\n"
                          "   ‚Ä¢ Risques l√©gaux et financiers\n"
                          "üÜò SOLUTION IMM√âDIATE:\n"
                          "   Publier: 'v=DMARC1; p=none; rua=mailto:dmarc@votredomaine.com'\n"
                          "üìä PRIORIT√â: URGENTE (correction en heures, pas jours)",
                          "DMARC_POLICY"))
        return out

    record = dmarc["record"]
    out.append(status("INFO", f"üìã Politique DMARC d√©tect√©e: {record}", "DMARC_POLICY"))
    
    # Analyse de la politique principale
    pvalue = dmarc["tags"]["p"]["value"]
    if pvalue == "none":
        out.append(status("CRITICAL",
                          "DMARC EN MODE 'OBSERVATION' SEULEMENT ! üëÅÔ∏è\n"
                          "‚ö†Ô∏è POLITIQUE p=none = Aucune protection active\n"
                          "üìä FONCTIONNEMENT ACTUEL:\n"
                          "   ‚Ä¢ Emails frauduleux: ACCEPT√âS sans restriction\n"
                          "   ‚Ä¢ Rapports g√©n√©r√©s: OUI (donn√©es collect√©es)\n"
                          "   ‚Ä¢ Action corrective: AUCUNE\n"
                          "üéØ UTILIT√â LIMIT√âE:\n"
                          "   ‚úÖ Monitoring et analyse des flux\n"
                          "   ‚úÖ Identification des sources l√©gitimes\n"
                          "   ‚ùå Protection z√©ro contre usurpation\n"
                          "üìà PROGRESSION RECOMMAND√âE:\n"
                          "   1. Analyser rapports DMARC 4-6 semaines\n"
                          "   2. Identifier sources l√©gitimes manquantes\n"
                          "   3. Corriger SPF/DKIM si n√©cessaire\n"
                          "   4. Passer √† p=quarantine puis p=reject\n"
                          "‚è∞ OBJECTIF: Protection active dans 2-3 mois maximum",
                          "DMARC_POLICY"))
    elif pvalue == "quarantine":
        out.append(status("WARNING",
                          "DMARC EN MODE 'QUARANTAINE' - PROTECTION PARTIELLE ‚ö†Ô∏è\n"
                          "üéØ POLITIQUE p=quarantine = Emails suspects en spam\n"
                          "üìä FONCTIONNEMENT ACTUEL:\n"
                          "   ‚Ä¢ Emails l√©gitimes (SPF/DKIM OK): Bo√Æte de r√©ception\n"
                          "   ‚Ä¢ Emails suspects (√©chec auth): Dossier spam/quarantaine\n"
                          "   ‚Ä¢ Emails frauduleux: G√©n√©ralement bloqu√©s\n"
                          "‚úÖ AVANTAGES:\n"
                          "   ‚Ä¢ Protection active contre 80-90% des attaques\n"
                          "   ‚Ä¢ Emails l√©gitimes toujours d√©livr√©s\n"
                          "   ‚Ä¢ P√©riode de transition s√©curis√©e\n"
                          "‚ö†Ô∏è LIMITES:\n"
                          "   ‚Ä¢ Emails frauduleux parfois visibles (dossier spam)\n"
                          "   ‚Ä¢ Utilisateurs peuvent acc√©der aux quarantaines\n"
                          "   ‚Ä¢ Protection non absolue\n"
                          "üéØ RECOMMANDATION STRAT√âGIQUE:\n"
                          "   ‚Ä¢ Excellente √©tape interm√©diaire\n"
                          "   ‚Ä¢ Surveiller rapports 4-8 semaines\n"
                          "   ‚Ä¢ √âvoluer vers p=reject pour protection maximale\n"
                          "üìä NIVEAU PROTECTION: Tr√®s bon (85-90%)",
                          "DMARC_POLICY"))
    elif pvalue == "reject":
        out.append(status("OK",
                          "DMARC EN MODE 'REJET' - PROTECTION MAXIMALE ! üõ°Ô∏è\n"
                          "üèÜ POLITIQUE p=reject = Configuration optimale\n"
                          "‚úÖ FONCTIONNEMENT PARFAIT:\n"
                          "   ‚Ä¢ Emails l√©gitimes (SPF/DKIM OK): D√©livr√©s normalement\n"
                          "   ‚Ä¢ Emails frauduleux: REJET√âS avant r√©ception\n"
                          "   ‚Ä¢ Usurpation: Impossible ou quasi-impossible\n"
                          "üéØ PROTECTION BUSINESS MAXIMALE:\n"
                          "   ‚Ä¢ R√©putation domaine pr√©serv√©e: 95%+\n"
                          "   ‚Ä¢ Confiance client maintenue\n"
                          "   ‚Ä¢ Phishing utilisant votre domaine: bloqu√©\n"
                          "   ‚Ä¢ Conformit√© s√©curit√©: excellente\n"
                          "üíé AVANTAGES CONCURRENTIELS:\n"
                          "   ‚Ä¢ Marque prot√©g√©e contre abus\n"
                          "   ‚Ä¢ Diff√©renciation s√©curitaire\n"
                          "   ‚Ä¢ R√©duction des incidents de s√©curit√©\n"
                          "üìä NIVEAU PROTECTION: Optimal (95-98%)\n"
                          "üèÖ F√âLICITATIONS: Configuration DMARC exemplaire !",
                          "DMARC_POLICY"))

    # Analyse du pourcentage d'application
    pct = dmarc["tags"].get("pct", {}).get("value", 100)
    if pct < 100:
        out.append(status("WARNING",
                          f"DMARC APPLIQU√â PARTIELLEMENT ! ‚ö†Ô∏è\n"
                          f"üìä POURCENTAGE ACTUEL: {pct}% des emails trait√©s\n"
                          f"üéØ SIGNIFICATION:\n"
                          f"   ‚Ä¢ {pct}% des emails: politique DMARC appliqu√©e\n"
                          f"   ‚Ä¢ {100-pct}% des emails: aucune politique (comme p=none)\n"
                          f"‚ö†Ô∏è RISQUES DU D√âPLOIEMENT PARTIEL:\n"
                          f"   ‚Ä¢ Attaquants peuvent exploiter les {100-pct}% non prot√©g√©s\n"
                          f"   ‚Ä¢ Protection al√©atoire et impr√©visible\n"
                          f"   ‚Ä¢ Fausse impression de s√©curit√©\n"
                          f"üéØ USAGE L√âGITIME: Transition progressive vers protection compl√®te\n"
                          f"üìà RECOMMANDATION:\n"
                          f"   1. Si tests OK depuis plusieurs semaines: passer √† 100%\n"
                          f"   2. Si d√©ploiement r√©cent: surveiller et augmenter graduellement\n"
                          f"   3. Objectif final: pct=100 pour protection compl√®te\n"
                          f"‚è∞ D√âLAI RECOMMAND√â: 4-8 semaines maximum en mode partiel",
                          "DMARC_POLICY"))
    else:
        out.append(status("OK",
                          "DMARC APPLIQU√â √Ä 100% ! ‚úÖ\n"
                          "üéØ COUVERTURE COMPL√àTE: Tous vos emails prot√©g√©s\n"
                          "üõ°Ô∏è PROTECTION UNIFORME: Aucune faille exploitable\n"
                          "üìä R√âSULTAT: S√©curit√© maximale et pr√©visible",
                          "DMARC_POLICY"))

    # Analyse des rapports agr√©g√©s (RUA)
    rua_warnings = dmarc.get("warnings", [])
    has_rua_warning = any("rua tag" in warning for warning in rua_warnings)
    
    if has_rua_warning:
        out.append(status("WARNING",
                          "RAPPORTS DMARC NON CONFIGUR√âS ! üìä\n"
                          "‚ö†Ô∏è PROBL√àME: Aucune adresse 'rua' sp√©cifi√©e\n"
                          "üíÄ CONS√âQUENCE: Vous vol–µ–∑ √† l'aveugle !\n"
                          "üéØ IMPACTS MAJEURS:\n"
                          "   ‚Ä¢ Aucune visibilit√© sur les tentatives d'usurpation\n"
                          "   ‚Ä¢ Impossible de d√©tecter les sources l√©gitimes manquantes\n"
                          "   ‚Ä¢ Aucun retour sur l'efficacit√© de votre politique\n"
                          "   ‚Ä¢ Diagnostic des probl√®mes: impossible\n"
                          "üîç DONN√âES PERDUES:\n"
                          "   ‚Ä¢ Volume d'emails trait√©s quotidiennement\n"
                          "   ‚Ä¢ Sources d'envoi non autoris√©es\n"
                          "   ‚Ä¢ Taux de succ√®s SPF/DKIM\n"
                          "   ‚Ä¢ G√©olocalisation des attaques\n"
                          "üõ†Ô∏è SOLUTION IMM√âDIATE:\n"
                          "   Ajouter: rua=mailto:dmarc-reports@votredomaine.com\n"
                          "üìà B√âN√âFICE: Visibilit√© compl√®te sur la s√©curit√© email",
                          "DMARC_POLICY"))
    else:
        out.append(status("OK",
                          "RAPPORTS DMARC CONFIGUR√âS ! üìä\n"
                          "‚úÖ SURVEILLANCE ACTIVE: Donn√©es collect√©es quotidiennement\n"
                          "üéØ AVANTAGES OP√âRATIONNELS:\n"
                          "   ‚Ä¢ D√©tection proactive des tentatives d'usurpation\n"
                          "   ‚Ä¢ Monitoring des sources d'envoi l√©gitimes\n"
                          "   ‚Ä¢ Optimisation continue de la configuration\n"
                          "   ‚Ä¢ Preuves pour investigations s√©curit√©\n"
                          "üìä RECOMMANDATION: Analyser les rapports mensuellement",
                          "DMARC_POLICY"))
    
    return out

# ----------------- Analyse MTA-STS ULTRA-D√âTAILL√âE -----------------

def analyze_mta_sts(mta: dict) -> List[Status]:
    out: List[Status] = []
    
    if not mta or not mta.get("valid", False):
        error_detail = mta.get('error', 'non d√©ploy√©') if mta else 'non d√©ploy√©'
        out.append(status("WARNING",
                          f"MTA-STS NON D√âPLOY√â ! üîê\n"
                          f"üìã STATUT: {error_detail}\n"
                          f"‚ö†Ô∏è IMPACT S√âCURITAIRE:\n"
                          f"   ‚Ä¢ Pas de protection contre d√©gradation TLS forc√©e\n"
                          f"   ‚Ä¢ Vuln√©rabilit√© aux attaques 'man-in-the-middle'\n"
                          f"   ‚Ä¢ Chiffrement email optionnel (pas garanti)\n"
                          f"üéØ MTA-STS EXPLIQU√â:\n"
                          f"   ‚Ä¢ Force les serveurs √† utiliser TLS (chiffrement)\n"
                          f"   ‚Ä¢ Emp√™che la d√©gradation vers connexions non-chiffr√©es\n"
                          f"   ‚Ä¢ Valide les certificats des serveurs destinataires\n"
                          f"üí° D√âPLOIEMENT OPTIONNEL MAIS RECOMMAND√â:\n"
                          f"   1. Cr√©er fichier politique sur https://mta-sts.votredomaine.com\n"
                          f"   2. Publier enregistrement DNS _mta-sts.votredomaine.com\n"
                          f"   3. Configurer mode 'enforce' apr√®s tests\n"
                          f"üìä PRIORIT√â: Moyenne (s√©curit√© renforc√©e)",
                          "MTA_STS"))
    else:
        mode = mta.get("policy", {}).get("mode", "inconnu")
        out.append(status("OK",
                          f"MTA-STS D√âPLOY√â AVEC SUCC√àS ! üîê\n"
                          f"üõ°Ô∏è MODE ACTUEL: {mode}\n"
                          f"‚úÖ PROTECTION TLS ACTIV√âE:\n"
                          f"   ‚Ä¢ Connexions chiffr√©es obligatoires\n"
                          f"   ‚Ä¢ Pr√©vention des attaques de d√©gradation\n"
                          f"   ‚Ä¢ Validation des certificats serveurs\n"
                          f"üéØ AVANTAGES S√âCURITAIRES:\n"
                          f"   ‚Ä¢ Emails prot√©g√©s en transit\n"
                          f"   ‚Ä¢ R√©sistance aux interceptions\n"
                          f"   ‚Ä¢ Conformit√© aux standards modernes\n"
                          f"üìä CONFIGURATION: Excellente (standard avanc√©)",
                          "MTA_STS"))
    
    return out

# ----------------- Analyse TLS-RPT ULTRA-D√âTAILL√âE -----------------

def analyze_tlsrpt(tls: dict) -> List[Status]:
    out: List[Status] = []
    
    if not tls or not tls.get("valid", False):
        out.append(status("WARNING",
                          "TLS-RPT NON CONFIGUR√â ! üìä\n"
                          "‚ö†Ô∏è SURVEILLANCE TLS MANQUANTE:\n"
                          "   ‚Ä¢ Aucune visibilit√© sur les √©checs de chiffrement\n"
                          "   ‚Ä¢ Probl√®mes TLS non d√©tect√©s automatiquement\n"
                          "   ‚Ä¢ Attaques de d√©gradation invisibles\n"
                          "üéØ TLS-RPT EXPLIQU√â:\n"
                          "   ‚Ä¢ Rapports automatiques sur √©checs TLS\n"
                          "   ‚Ä¢ D√©tection proactive des probl√®mes de livraison\n"
                          "   ‚Ä¢ Monitoring de la s√©curit√© transport\n"
                          "üí° AVANTAGES DU D√âPLOIEMENT:\n"
                          "   ‚Ä¢ Diagnostic rapide des probl√®mes de d√©livrabilit√©\n"
                          "   ‚Ä¢ D√©tection des tentatives d'interception\n"
                          "   ‚Ä¢ Optimisation de la configuration TLS\n"
                          "üõ†Ô∏è D√âPLOIEMENT SIMPLE:\n"
                          "   Enregistrement DNS: _smtp._tls.votredomaine.com\n"
                          "   Contenu: v=TLSRPTv1; rua=mailto:tls-reports@votredomaine.com\n"
                          "üìä PRIORIT√â: Faible (monitoring avanc√©)",
                          "TLS_RPT"))
    else:
        out.append(status("OK",
                          "TLS-RPT CONFIGUR√â ! üìä\n"
                          "‚úÖ MONITORING TLS ACTIF:\n"
                          "   ‚Ä¢ Surveillance continue des √©checs de chiffrement\n"
                          "   ‚Ä¢ D√©tection automatique des probl√®mes\n"
                          "   ‚Ä¢ Rapports d√©taill√©s sur les connexions TLS\n"
                          "üéØ B√âN√âFICES OP√âRATIONNELS:\n"
                          "   ‚Ä¢ R√©solution proactive des probl√®mes de livraison\n"
                          "   ‚Ä¢ Visibilit√© sur la sant√© de l'infrastructure\n"
                          "   ‚Ä¢ Am√©lioration continue de la s√©curit√©\n"
                          "üìä CONFIGURATION: Avanc√©e (monitoring pro-actif)",
                          "TLS_RPT"))
    
    return out

# ----------------- Analyse DNSSEC ULTRA-D√âTAILL√âE -----------------

def analyze_dnssec(enabled: bool) -> List[Status]:
    if enabled:
        return [status("OK",
                      "DNSSEC ACTIV√â - PROTECTION DNS MAXIMALE ! üîê\n"
                      "‚úÖ S√âCURIT√â DNS RENFORC√âE:\n"
                      "   ‚Ä¢ Authentification cryptographique des r√©ponses DNS\n"
                      "   ‚Ä¢ Protection contre empoisonnement du cache DNS\n"
                      "   ‚Ä¢ Int√©grit√© garantie des enregistrements SPF/DKIM/DMARC\n"
                      "üéØ AVANTAGES CRITIQUES:\n"
                      "   ‚Ä¢ Attaques DNS spoofing: impossibles\n"
                      "   ‚Ä¢ Redirection malveillante: bloqu√©e\n"
                      "   ‚Ä¢ Confiance absolue dans les r√©solutions DNS\n"
                      "üèÜ IMPACT BUSINESS:\n"
                      "   ‚Ä¢ Infrastructure email ultra-s√©curis√©e\n"
                      "   ‚Ä¢ Protection contre attaques sophistiqu√©es\n"
                      "   ‚Ä¢ Conformit√© aux standards s√©curitaires avanc√©s\n"
                      "üìä NIVEAU: Excellence s√©curitaire (top 5% des domaines)",
                      "DNSSEC")]
    
    return [status("WARNING",
                  "DNSSEC NON D√âPLOY√â ! üîì\n"
                  "‚ö†Ô∏è VULN√âRABILIT√â DNS:\n"
                  "   ‚Ä¢ R√©ponses DNS non authentifi√©es\n"
                  "   ‚Ä¢ Risque d'empoisonnement du cache DNS\n"
                  "   ‚Ä¢ Possibilit√© de redirection malveillante\n"
                  "üéØ ATTAQUES POSSIBLES:\n"
                  "   ‚Ä¢ D√©tournement des enregistrements SPF/DKIM\n"
                  "   ‚Ä¢ Redirection emails vers serveurs malveillants\n"
                  "   ‚Ä¢ Compromission de l'authentification email\n"
                  "üí° DNSSEC EXPLIQU√â:\n"
                  "   ‚Ä¢ Signature cryptographique des zones DNS\n"
                  "   ‚Ä¢ Validation de l'authenticit√© par les r√©solveurs\n"
                  "   ‚Ä¢ Cha√Æne de confiance depuis les serveurs racine\n"
                  "üõ†Ô∏è D√âPLOIEMENT:\n"
                  "   ‚Ä¢ Contacter registraire/h√©bergeur DNS\n"
                  "   ‚Ä¢ Activation g√©n√©ralement gratuite\n"
                  "   ‚Ä¢ Configuration technique requise\n"
                  "üìä PRIORIT√â: Moyenne (s√©curit√© renforc√©e)",
                  "DNSSEC")]

# ----------------- Analyse BIMI ULTRA-D√âTAILL√âE -----------------

def analyze_bimi(bimi: dict, dmarc_policy: str) -> List[Status]:
    out: List[Status] = []
    
    if not bimi or not bimi.get("record"):
        out.append(status("INFO",
                          "BIMI NON D√âPLOY√â (NORMAL) üé®\n"
                          "üìã STATUT: Optionnel - Impact marketing uniquement\n"
                          "üéØ BIMI EXPLIQU√â:\n"
                          "   ‚Ä¢ Brand Indicators for Message Identification\n"
                          "   ‚Ä¢ Affiche logo de votre marque dans les clients email\n"
                          "   ‚Ä¢ Renforce reconnaissance visuelle de vos emails\n"
                          "üí° AVANTAGES MARKETING:\n"
                          "   ‚Ä¢ Am√©lioration de la reconnaissance de marque\n"
                          "   ‚Ä¢ Diff√©renciation visuelle dans la bo√Æte de r√©ception\n"
                          "   ‚Ä¢ Renforcement de la confiance utilisateur\n"
                          "   ‚Ä¢ R√©duction du phishing par usurpation visuelle\n"
                          "‚ö†Ô∏è PR√âREQUIS STRICTS:\n"
                          "   ‚Ä¢ DMARC avec p=quarantine ou p=reject OBLIGATOIRE\n"
                          "   ‚Ä¢ Certificat VMC (Verified Mark Certificate) requis\n"
                          "   ‚Ä¢ Logo au format SVG sp√©cifique\n"
                          "üìä PRIORIT√â: Tr√®s faible (cosm√©tique/marketing)",
                          "BIMI"))
        return out

    if not bimi.get("valid", False):
        error_detail = bimi.get('error', 'configuration invalide')
        out.append(status("WARNING",
                          f"BIMI INVALIDE ! üé®\n"
                          f"üî¥ ERREUR: {error_detail}\n"
                          f"‚ö†Ô∏è CONS√âQUENCE: Logo non affich√© dans les clients email\n"
                          f"üéØ CAUSES FR√âQUENTES:\n"
                          f"   ‚Ä¢ Format SVG non conforme aux sp√©cifications\n"
                          f"   ‚Ä¢ URL du logo inaccessible ou incorrecte\n"
                          f"   ‚Ä¢ Certificat VMC manquant ou invalide\n"
                          f"   ‚Ä¢ Syntaxe de l'enregistrement DNS incorrecte\n"
                          f"üõ†Ô∏è DIAGNOSTIC RECOMMAND√â:\n"
                          f"   1. Valider le format SVG avec outils BIMI\n"
                          f"   2. V√©rifier accessibilit√© de l'URL logo\n"
                          f"   3. Contr√¥ler validit√© du certificat VMC\n"
                          f"üìä IMPACT: Cosm√©tique uniquement (pas de s√©curit√©)",
                          "BIMI"))
    else:
        out.append(status("OK",
                          "BIMI CONFIGUR√â AVEC SUCC√àS ! üé®\n"
                          "‚úÖ LOGO DE MARQUE ACTIF:\n"
                          "   ‚Ä¢ Affichage du logo dans Gmail, Yahoo, etc.\n"
                          "   ‚Ä¢ Renforcement de l'identit√© visuelle\n"
                          "   ‚Ä¢ Diff√©renciation premium dans les bo√Ætes de r√©ception\n"
                          "üéØ AVANTAGES MARKETING R√âALIS√âS:\n"
                          "   ‚Ä¢ Reconnaissance imm√©diate de vos emails\n"
                          "   ‚Ä¢ Confiance renforc√©e des destinataires\n"
                          "   ‚Ä¢ Protection contre usurpation visuelle\n"
                          "üìä STATUT: Configuration marketing optimale",
                          "BIMI"))

    # V√©rification DMARC (pr√©requis critique pour BIMI)
    if dmarc_policy not in ["reject", "quarantine"]:
        out.append(status("WARNING",
                          "BIMI SANS DMARC STRICT ! ‚ö†Ô∏è\n"
                          f"üö® PROBL√àME: DMARC en mode '{dmarc_policy}' (requis: quarantine/reject)\n"
                          "üíÄ CONS√âQUENCE: Logo BIMI ignor√© par la plupart des clients\n"
                          "üéØ EXPLICATION TECHNIQUE:\n"
                          "   ‚Ä¢ BIMI exige une protection anti-usurpation forte\n"
                          "   ‚Ä¢ Gmail/Yahoo refusent d'afficher logos sans DMARC strict\n"
                          "   ‚Ä¢ Investissement BIMI gaspill√© sans protection pr√©alable\n"
                          "üõ†Ô∏è SOLUTION:\n"
                          "   1. Corriger DMARC vers p=quarantine ou p=reject\n"
                          "   2. Attendre propagation (24-48h)\n"
                          "   3. BIMI fonctionnera automatiquement\n"
                          "üìä PRIORIT√â: Moyenne (corriger DMARC d'abord)",
                          "BIMI"))
    
    return out

# ----------------- Analyse MX et STARTTLS ULTRA-D√âTAILL√âE -----------------

def analyze_mx_starttls(mx: dict) -> List[Status]:
    """Analyse les serveurs MX et leurs capacit√©s STARTTLS"""
    out: List[Status] = []
    
    if not mx or not mx.get("hosts"):
        out.append(status("CRITICAL",
                          "AUCUN SERVEUR MX CONFIGUR√â !\n"
                          "üö® PROBL√àME CRITIQUE: Impossible de recevoir des emails\n"
                          "üí• CONS√âQUENCES IMM√âDIATES:\n"
                          "   ‚Ä¢ Emails entrants perdus d√©finitivement\n"
                          "   ‚Ä¢ Communications clients interrompues\n"
                          "   ‚Ä¢ Perte d'opportunit√©s commerciales\n"
                          "   ‚Ä¢ R√©putation professionnelle d√©grad√©e\n"
                          "üõ†Ô∏è SOLUTION URGENTE:\n"
                          "   Configurer au minimum un enregistrement MX\n"
                          "   Exemple: '10 mail.votredomaine.com'",
                          "SPF_LIMIT"))
        return out

    hosts = mx.get("hosts", [])
    out.append(status("INFO", f"üìß {len(hosts)} serveur(s) MX configur√©(s)", "MTA_STS"))
    
    starttls_supported = 0
    starttls_failed = 0
    connection_issues = 0
    
    for i, host in enumerate(hosts):
        hostname = host.get("hostname", "inconnu")
        preference = host.get("preference", 0)
        starttls = host.get("starttls", False)
        addresses = host.get("addresses", [])
        
        out.append(status("INFO", 
                          f"üñ•Ô∏è Serveur MX #{i+1}: {hostname} (priorit√©: {preference})\n"
                          f"   üìç Adresses IP: {', '.join(addresses) if addresses else 'Non r√©solues'}\n"
                          f"   üîê STARTTLS: {'‚úÖ Support√©' if starttls else '‚ùå Non support√©'}",
                          "MTA_STS"))
        
        if starttls:
            starttls_supported += 1
        else:
            starttls_failed += 1
            
    # V√©rification des warnings de connexion
    warnings = mx.get("warnings", [])
    if warnings:
        connection_issues = len([w for w in warnings if "Connection" in w or "timed out" in w])
        out.append(status("WARNING",
                          f"PROBL√àMES DE CONNECTIVIT√â D√âTECT√âS ! ‚ö†Ô∏è\n"
                          f"üö® {len(warnings)} serveur(s) MX inaccessible(s)\n"
                          f"üìù D√©tails:\n" + "\n".join([f"   ‚Ä¢ {w}" for w in warnings]) + "\n"
                          f"üí° CAUSES POSSIBLES:\n"
                          f"   ‚Ä¢ Serveurs temporairement hors ligne\n"
                          f"   ‚Ä¢ Firewall bloquant les connexions SMTP\n"
                          f"   ‚Ä¢ Configuration DNS incorrecte\n"
                          f"   ‚Ä¢ Maintenance en cours\n"
                          f"üîß ACTIONS RECOMMAND√âES:\n"
                          f"   1. V√©rifier statut serveurs avec l'√©quipe IT\n"
                          f"   2. Tester connectivit√© SMTP manuellement\n"
                          f"   3. Contr√¥ler r√®gles firewall",
                          "MTA_STS"))

    # Analyse globale STARTTLS
    if starttls_failed == 0 and starttls_supported > 0:
        out.append(status("OK",
                          "STARTTLS PARFAITEMENT CONFIGUR√â ! üîê\n"
                          f"‚úÖ TOUS les serveurs MX ({starttls_supported}/{len(hosts)}) supportent STARTTLS\n"
                          "üõ°Ô∏è PROTECTION OPTIMALE:\n"
                          "   ‚Ä¢ Emails entrants chiffr√©s en transit\n"
                          "   ‚Ä¢ Protection contre interception\n"
                          "   ‚Ä¢ Conformit√© s√©curit√© maximale\n"
                          "üèÜ AVANTAGES R√âALIS√âS:\n"
                          "   ‚Ä¢ Confidentialit√© des communications\n"
                          "   ‚Ä¢ Respect des r√©glementations (RGPD, etc.)\n"
                          "   ‚Ä¢ Confiance renforc√©e des partenaires",
                          "MTA_STS"))
    elif starttls_supported > 0:
        out.append(status("WARNING",
                          f"STARTTLS PARTIELLEMENT SUPPORT√â ! ‚ö†Ô∏è\n"
                          f"üìä √âTAT: {starttls_supported}/{len(hosts)} serveurs supportent STARTTLS\n"
                          f"üö® RISQUE: Emails non chiffr√©s sur certains serveurs\n"
                          f"üí° PROBL√àME: Configuration h√©t√©rog√®ne\n"
                          f"üéØ IMPACT S√âCURIT√â:\n"
                          f"   ‚Ä¢ Faille potentielle d'interception\n"
                          f"   ‚Ä¢ Non-conformit√© partielle\n"
                          f"   ‚Ä¢ Risque selon serveur utilis√©\n"
                          f"üõ†Ô∏è SOLUTION:\n"
                          f"   Activer STARTTLS sur TOUS les serveurs MX",
                          "MTA_STS"))
    else:
        out.append(status("CRITICAL",
                          "AUCUN SUPPORT STARTTLS D√âTECT√â ! üö®\n"
                          f"üí• PROBL√àME MAJEUR: {len(hosts)} serveur(s) MX sans chiffrement\n"
                          "‚ö° VULN√âRABILIT√â CRITIQUE:\n"
                          "   ‚Ä¢ Emails en texte clair sur le r√©seau\n"
                          "   ‚Ä¢ Interception facile par des tiers\n"
                          "   ‚Ä¢ Violation de confidentialit√©\n"
                          "   ‚Ä¢ Non-conformit√© r√©glementaire\n"
                          "üî• RISQUES BUSINESS:\n"
                          "   ‚Ä¢ Espionnage industriel possible\n"
                          "   ‚Ä¢ Sanctions RGPD/compliance\n"
                          "   ‚Ä¢ Perte de confiance clients\n"
                          "üÜò ACTION URGENTE:\n"
                          "   Configurer STARTTLS sur tous serveurs MX",
                          "MTA_STS"))
    
    return out

# ----------------- Analyse des crit√®res de s√©curit√© sp√©cifiques -----------------

def analyze_security_criteria(report: dict) -> List[Status]:
    """V√©rifie les 10 crit√®res de s√©curit√© sp√©cifiques du fichier crit√®re.txt"""
    out: List[Status] = []
    
    out.append(status("INFO", "üìã V√âRIFICATION DES CRIT√àRES DE S√âCURIT√â SP√âCIFIQUES", "SPF_ALL"))
    
    # 1. SPF - SPF record present
    spf = report.get("spf", {})
    if spf.get("record") and spf.get("valid", False):
        out.append(status("OK", "‚úÖ CRIT√àRE 1/10: Enregistrement SPF pr√©sent et valide", "SPF_ALL"))
    else:
        out.append(status("CRITICAL", "‚ùå CRIT√àRE 1/10: Enregistrement SPF absent ou invalide", "SPF_ALL"))
    
    # 2. SPF - Strict mode (v√©rifie si -all est utilis√©)
    spf_record = spf.get("record", "") or ""
    if spf_record.strip().endswith("-all"):
        out.append(status("OK", "‚úÖ CRIT√àRE 2/10: SPF en mode strict (-all)", "SPF_ALL"))
    else:
        out.append(status("CRITICAL", "‚ùå CRIT√àRE 2/10: SPF pas en mode strict (manque -all)", "SPF_ALL"))
    
    # 3. DMARC - DMARC record present
    dmarc = report.get("dmarc", {})
    if dmarc.get("record") and dmarc.get("valid", False):
        out.append(status("OK", "‚úÖ CRIT√àRE 3/10: Enregistrement DMARC pr√©sent et valide", "DMARC_POLICY"))
    else:
        out.append(status("CRITICAL", "‚ùå CRIT√àRE 3/10: Enregistrement DMARC absent ou invalide", "DMARC_POLICY"))
    
    # 4. DMARC - Policy is not none
    dmarc_policy = dmarc.get("tags", {}).get("p", {}).get("value", "none")
    if dmarc_policy in ["quarantine", "reject"]:
        out.append(status("OK", f"‚úÖ CRIT√àRE 4/10: Politique DMARC stricte (p={dmarc_policy})", "DMARC_POLICY"))
    else:
        out.append(status("CRITICAL", f"‚ùå CRIT√àRE 4/10: Politique DMARC non stricte (p={dmarc_policy})", "DMARC_POLICY"))
    
    # 5. DMARC - Strict mode (v√©rifie si p=reject)
    if dmarc_policy == "reject":
        out.append(status("OK", "‚úÖ CRIT√àRE 5/10: DMARC en mode strict maximum (p=reject)", "DMARC_POLICY"))
    elif dmarc_policy == "quarantine":
        out.append(status("WARNING", "‚ö†Ô∏è CRIT√àRE 5/10: DMARC mod√©r√©ment strict (p=quarantine, recommand√©: p=reject)", "DMARC_POLICY"))
    else:
        out.append(status("CRITICAL", f"‚ùå CRIT√àRE 5/10: DMARC pas en mode strict (p={dmarc_policy})", "DMARC_POLICY"))
    
    # 6. DMARC - rua present (rapports agr√©g√©s)
    if "rua" in dmarc.get("tags", {}):
        out.append(status("OK", "‚úÖ CRIT√àRE 6/10: Adresse RUA (rapports agr√©g√©s) configur√©e", "DMARC_POLICY"))
    else:
        out.append(status("CRITICAL", "‚ùå CRIT√àRE 6/10: Adresse RUA (rapports agr√©g√©s) manquante", "DMARC_POLICY"))
    
    # 7. DMARC - ruf present (rapports d√©taill√©s)
    if "ruf" in dmarc.get("tags", {}):
        out.append(status("OK", "‚úÖ CRIT√àRE 7/10: Adresse RUF (rapports d√©taill√©s) configur√©e", "DMARC_POLICY"))
    else:
        out.append(status("WARNING", "‚ö†Ô∏è CRIT√àRE 7/10: Adresse RUF (rapports d√©taill√©s) manquante", "DMARC_POLICY"))
    
    # 8. DMARC - pct equals 100
    dmarc_pct = dmarc.get("tags", {}).get("pct", {}).get("value", 0)
    if dmarc_pct == 100:
        out.append(status("OK", "‚úÖ CRIT√àRE 8/10: DMARC appliqu√© √† 100% du trafic (pct=100)", "DMARC_POLICY"))
    else:
        out.append(status("WARNING", f"‚ö†Ô∏è CRIT√àRE 8/10: DMARC partiel (pct={dmarc_pct}%, recommand√©: 100%)", "DMARC_POLICY"))
    
    # 9. Mail Server - smtp - starttls offered
    mx = report.get("mx", {})
    mx_hosts = mx.get("hosts", [])
    starttls_count = sum(1 for host in mx_hosts if host.get("starttls", False))
    if starttls_count > 0 and starttls_count == len(mx_hosts):
        out.append(status("OK", f"‚úÖ CRIT√àRE 9/10: STARTTLS support√© sur tous les serveurs MX ({starttls_count}/{len(mx_hosts)})", "MTA_STS"))
    elif starttls_count > 0:
        out.append(status("WARNING", f"‚ö†Ô∏è CRIT√àRE 9/10: STARTTLS partiel ({starttls_count}/{len(mx_hosts)} serveurs)", "MTA_STS"))
    else:
        out.append(status("CRITICAL", "‚ùå CRIT√àRE 9/10: Aucun serveur MX ne supporte STARTTLS", "MTA_STS"))
    
    # 10. Mail Server - no pop service (ce crit√®re n√©cessite une analyse externe)
    # Note: Cette information n'est pas disponible dans le scan checkdmarc standard
    out.append(status("INFO", "‚ÑπÔ∏è CRIT√àRE 10/10: Service POP (n√©cessite v√©rification manuelle)", "MTA_STS"))
    
    return out

# ----------------- Audit complet avec explications -----------------

def audit_domain(report: dict) -> List[Status]:
    results: List[Status] = []
    
    print("üîç ANALYSE D√âTAILL√âE DES PROTOCOLES D'AUTHENTIFICATION EMAIL\n")
    
    # SPF Analysis
    print("=" * 60)
    print("üìß SPF (Sender Policy Framework)")
    print("=" * 60)
    results += analyze_spf(report.get("spf"))
    
    # DKIM Analysis  
    print("=" * 60)
    print("üîë DKIM (DomainKeys Identified Mail)")
    print("=" * 60)
    results += analyze_dkim(report.get("dkim"))
    
    # DMARC Analysis
    print("=" * 60)
    print("üõ°Ô∏è DMARC (Domain-based Message Authentication)")
    print("=" * 60)
    results += analyze_dmarc(report.get("dmarc"))
    
    # MX et STARTTLS Analysis
    print("=" * 60)
    print("üìß SERVEURS MX et STARTTLS")
    print("=" * 60)
    results += analyze_mx_starttls(report.get("mx"))
    
    # MTA-STS Analysis
    print("=" * 60)
    print("üîê MTA-STS (Mail Transfer Agent Strict Transport Security)")
    print("=" * 60)
    results += analyze_mta_sts(report.get("mta_sts"))
    
    # TLS-RPT Analysis
    print("=" * 60)
    print("üìä TLS-RPT (Transport Layer Security Reporting)")
    print("=" * 60)
    results += analyze_tlsrpt(report.get("smtp_tls_reporting"))
    
    # DNSSEC Analysis
    print("=" * 60)
    print("üîí DNSSEC (Domain Name System Security Extensions)")
    print("=" * 60)
    results += analyze_dnssec(report.get("dnssec", False))
    
    # BIMI Analysis
    print("=" * 60)
    print("üé® BIMI (Brand Indicators for Message Identification)")
    print("=" * 60)
    dmarc_policy = report.get("dmarc", {}).get("tags", {}).get("p", {}).get("value", "none")
    results += analyze_bimi(report.get("bimi"), dmarc_policy)
    
    # Crit√®res de s√©curit√© sp√©cifiques
    print("=" * 60)
    print("üìã V√âRIFICATION CRIT√àRES DE S√âCURIT√â")
    print("=" * 60)
    results += analyze_security_criteria(report)
    
    return results

# ----------------- Main avec rapport final -----------------

def main() -> None:
    if len(sys.argv) < 2:
        print("üîç AUDITEUR EMAIL ULTRA-D√âTAILL√â")
        print("=" * 50)
        print("Usage : python3 checkdmarc_enhanced.py <scan1.json> [scan2.json ...]")
        print("\nüìã Ce script analyse en profondeur vos configurations email et explique :")
        print("   ‚Ä¢ POURQUOI chaque √©l√©ment est critique")
        print("   ‚Ä¢ QUE SE PASSE-T-IL en cas de mauvaise configuration") 
        print("   ‚Ä¢ COMMENT corriger les probl√®mes d√©tect√©s")
        print("   ‚Ä¢ QUEL EST L'IMPACT BUSINESS de chaque vuln√©rabilit√©")
        sys.exit(1)

    overall_ok = True
    total_domains = 0
    critical_issues = 0
    warning_issues = 0
    
    for file in sys.argv[1:]:
        path = Path(file)
        if not path.exists():
            print(f"‚ùå Fichier introuvable : {file}")
            continue

        total_domains += 1
        print(f"\nüéØ ===== AUDIT S√âCURIT√â EMAIL POUR : {path.stem.upper()} =====")
        
        try:
            data = json.loads(path.read_text())
            statuses = audit_domain(data)
            
            domain_critical = 0
            domain_warnings = 0
            
            for st in statuses:
                print_status(st)
                if st[0] == "CRITICAL":
                    overall_ok = False
                    domain_critical += 1
                    critical_issues += 1
                elif st[0] == "WARNING":
                    domain_warnings += 1
                    warning_issues += 1
            
            # R√©sum√© par domaine
            print("=" * 60)
            print(f"üìä R√âSUM√â POUR {path.stem.upper()}")
            print("=" * 60)
            if domain_critical == 0 and domain_warnings == 0:
                print("üèÜ EXCELLENT ! Configuration email exemplaire !")
            elif domain_critical == 0:
                print(f"‚úÖ BON ! {domain_warnings} am√©liorations recommand√©es")
            else:
                print(f"üö® CRITIQUE ! {domain_critical} probl√®mes majeurs + {domain_warnings} warnings")
            print()
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'analyse de {file}: {e}")
            overall_ok = False

    # Rapport final global
    print("\n" + "=" * 80)
    print("üéØ RAPPORT FINAL - AUDIT S√âCURIT√â EMAIL")
    print("=" * 80)
    
    if total_domains == 1:
        if overall_ok:
            print("üèÜ F√âLICITATIONS ! Votre domaine est correctement s√©curis√©.")
        else:
            print("‚ö†Ô∏è ATTENTION ! Des vuln√©rabilit√©s critiques ont √©t√© d√©tect√©es.")
    else:
        print(f"üìä DOMAINES ANALYS√âS: {total_domains}")
        print(f"üö® PROBL√àMES CRITIQUES: {critical_issues}")
        print(f"‚ö†Ô∏è AM√âLIORATIONS RECOMMAND√âES: {warning_issues}")
        
        if overall_ok:
            print("üèÜ R√âSULTAT GLOBAL: Tous vos domaines sont correctement prot√©g√©s !")
        else:
            print("‚ö†Ô∏è R√âSULTAT GLOBAL: Des actions correctives imm√©diates sont requises.")
    
    print("\nüí° PROCHAINES √âTAPES RECOMMAND√âES:")
    if critical_issues > 0:
        print("   1. üö® URGENT: Corriger IMM√âDIATEMENT les probl√®mes CRITIQUES")
        print("   2. ‚ö†Ô∏è Planifier les am√©liorations pour les warnings")
        print("   3. üîÑ Re-scanner apr√®s corrections")
    elif warning_issues > 0:
        print("   1. ‚ö†Ô∏è Planifier les am√©liorations recommand√©es")
        print("   2. üîÑ Re-scanner apr√®s optimisations")
        print("   3. üìä Monitorer les rapports DMARC r√©guli√®rement")
    else:
        print("   1. üìä Surveiller les rapports DMARC mensuellement")
        print("   2. üîÑ Re-scanner trimestriellement")
        print("   3. üèÜ Maintenir l'excellence s√©curitaire !")
    
    print(f"\n‚è∞ AUDIT TERMIN√â - Code retour: {'0 (succ√®s)' if overall_ok else '1 (probl√®mes d√©tect√©s)'}")
    sys.exit(0 if overall_ok else 1)

if __name__ == "__main__":
    main()
